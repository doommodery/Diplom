# ================== base imports ==================
import sqlite3, datetime, asyncio, logging, requests, torch
from typing import Dict, List, Tuple
import pandas as pd
import os
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import seaborn as sns
# ================== enhanced imports ==================
from aiogram import types
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from core.states import HealthConditionState, ReportState
from utils.model_utils import AIModel
from io import BytesIO
# ================== From other files ==================
from utils.validation import ImprovedSymptomAnalyzer
from config import DB_PATH, WEATHER_API_KEY
from scripts.generation_sentetic_data import SYMPTOMS
from keyboards.keyboards import get_start_keyboard, get_health_keyboard, get_report_days_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class ReportGenerationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤"""
    def __init__(self, message: str, original_error: Exception = None):
        self.message = message
        self.original_error = original_error
        super().__init__(message)

    def __str__(self):
        if self.original_error:
            return f"{self.message} (Original: {str(self.original_error)})"
        return self.message

async def process_health_analysis(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text
    logger.info(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–µ–∫—Å—Ç: '{user_input}'")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤
        analyzer = ImprovedSymptomAnalyzer(
            use_llm=True,
            symptom_threshold=0.65,
            condition_threshold=0.8
        )
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤
        symptoms = analyzer.analyze_symptoms(user_input)
        chronic = analyzer.analyze_conditions(user_input)
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        symptoms = [s for s in symptoms if s != "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"]
        chronic = [c for c in chronic if c != "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"]
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ - —Å–∏–º–ø—Ç–æ–º—ã: {symptoms}, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ: {chronic}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT timezone, birth_date, chronic_conditions FROM user_info WHERE user_id = ?", 
                (user_id,)
            )
            user_info = cursor.fetchone()
            
            if not user_info:
                logger.error("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ.", reply_markup=get_start_keyboard())
                await state.finish()
                return

            timezone, birth_date, existing_chronic = user_info
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π
            final_chronic = existing_chronic if existing_chronic and existing_chronic != "-" else "-"
            if chronic:
                chronic_str = ", ".join(chronic)
                final_chronic = f"{existing_chronic}, {chronic_str}" if existing_chronic and existing_chronic != "-" else chronic_str

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
            temperature = None
            if timezone:
                try:
                    city = timezone.split("/")[-1].replace("_", " ")
                    weather = await get_weather_data(city)
                    if weather and "–ù–µ —É–¥–∞–ª–æ—Å—å" not in weather:
                        temp_part = weather.split(',')[1].strip()
                        temperature = float(temp_part.split('¬∞')[0].strip())
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {str(e)}")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –º–æ–¥–µ–ª–∏
        symptoms_str = ", ".join(symptoms) if symptoms else "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Ö–æ—Ä–æ—à–æ"
        
        ai_model = await AIModel.get_instance()
        if not ai_model.is_ready:
            logger.error("AI –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
            await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return

        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–∏
            input_data = {
                '–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è': symptoms_str,
                '–í–æ–∑—Ä–∞—Å—Ç': int(birth_date) if birth_date else 30,  # –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω
                '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)': temperature if temperature is not None else 20.0  # –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            }

            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            encodings, additional_features = ai_model.preprocess_input(input_data)
            features_tensor = torch.tensor(additional_features).to(ai_model.device)
            
            inputs = {
                'input_ids': encodings['input_ids'].to(ai_model.device),
                'attention_mask': encodings['attention_mask'].to(ai_model.device),
                'additional_features': features_tensor
            }

            with torch.no_grad():
                diagnosis_logits, doctor_logits = ai_model.model(**inputs)

            diagnosis = ai_model.diagnosis_encoder.inverse_transform([torch.argmax(diagnosis_logits).item()])[0]
            doctor = ai_model.doctor_encoder.inverse_transform([torch.argmax(doctor_logits).item()])[0]

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = (
                f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                f"üìã –°–∏–º–ø—Ç–æ–º—ã: {symptoms_str}\n\n"
                f"ü©∫ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ: {diagnosis}\n\n"
                f"üë®‚Äç‚öïÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {doctor}\n\n"
                f"üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {birth_date if birth_date else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {existing_chronic if existing_chronic != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
                f"‚Ä¢ –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {temperature if temperature is not None else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}¬∞C\n"
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î
            cursor.execute('''
                INSERT INTO user_condition_analysis 
                (user_id, user_condition, weather_condition, doctor, diagnosis, date_an, chronic_conditions, age)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user_id, symptoms_str, str(temperature), doctor, diagnosis, 
                datetime.datetime.now().strftime("%Y-%m-%d"), 
                existing_chronic, birth_date
            ))
            conn.commit()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ AI –º–æ–¥–µ–ª–∏: {str(e)}")
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
            return

        await message.answer(response, reply_markup=get_health_keyboard())

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", exc_info=True)
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    finally:
        await state.finish()
        conn.close()
        
async def get_weather_data(city: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = await asyncio.to_thread(requests.get, url, timeout=5)
        if response.status_code == 200:
            data = response.json()
            return f"{data['weather'][0]['description']}, {data['main']['temp']}¬∞C, {data['main']['humidity']}%"
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

async def delete_old_records():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 60 –¥–Ω–µ–π)"""
    while True:
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            two_months_ago = (datetime.datetime.now() - datetime.timedelta(days=60)).strftime("%Y-%m-%d")
            cursor.execute("DELETE FROM user_condition_analysis WHERE date_an <= ?", (two_months_ago,))
            conn.commit()
            conn.close()
            await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            await asyncio.sleep(3600)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def generate_report(
    records: List[Tuple], 
    user_id: int, 
    start_date: str, 
    end_date: str
) -> Tuple[InputFile, ...]:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö CSV, TXT –∏ PNG –≥—Ä–∞—Ñ–∏–∫–æ–≤.
    
    Args:
        records: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç–µ (—Å–∏–º–ø—Ç–æ–º—ã, –ø–æ–≥–æ–¥–∞, –¥–∞—Ç–∞, –¥–∏–∞–≥–Ω–æ–∑, ...)
        user_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        start_date: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ (YYYY-MM-DD)
        end_date: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞ (YYYY-MM-DD)
    
    Returns:
        –ö–æ—Ä—Ç–µ–∂ –∏–∑ InputFile (CSV, TXT, PNG-–≥—Ä–∞—Ñ–∏–∫–∏...)
    
    Raises:
        ReportGenerationError: –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not records:
            return _generate_empty_report(start_date, end_date)

        # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ DataFrame
        df = pd.DataFrame(records, columns=[
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "–î–∞—Ç–∞", 
            "–î–∏–∞–≥–Ω–æ–∑", "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "–í–æ–∑—Ä–∞—Å—Ç", "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –≤—Ä–∞—á"
        ])
        
        # 3. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        os.makedirs("reports", exist_ok=True)
        base_filename = f"reports/health_report_{user_id}_{start_date}_to_{end_date}"
        
        # 4. –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
        txt_file = _generate_text_report(df, base_filename)
        
        # 5. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º—ã)
        image_files = []
        symptom_details = _extract_symptom_details(df)
        
        if not symptom_details:
            image_files.append(_create_empty_plot("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö"))
        else:
            try:
                plot1 = _generate_symptoms_plot(symptom_details, start_date, end_date)
                plot2 = _generate_heatmap(symptom_details)
                image_files.extend([plot1, plot2])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
                image_files.append(_create_error_plot(e))

        # 6. CSV –æ—Ç—á–µ—Ç
        csv_file = f"{base_filename}.csv"
        df.to_csv(csv_file, index=False, encoding="utf-8")
        
        return (
            InputFile(csv_file),
            InputFile(txt_file),
            *[InputFile(buf, filename=name) for name, buf in image_files]
        )
        
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        raise ReportGenerationError(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

def _generate_empty_report(start_date: str, end_date: str) -> Tuple[InputFile]:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    content = f"–û—Ç—á—ë—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ {start_date} ‚Äî {end_date}\n\n–î–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    buf = BytesIO(content.encode("utf-8"))
    return (InputFile(buf, filename="empty_report.txt"),)

def _extract_symptom_details(df: pd.DataFrame) -> List[Dict]:
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Å–∏–º–ø—Ç–æ–º–∞—Ö"""
    if df.empty:
        return []

    analyzer = ImprovedSymptomAnalyzer()
    symptom_details = []
    
    for _, row in df.iterrows():
        symptoms = analyzer.analyze_symptoms(row["–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"])
        for symptom in symptoms:
            symptom_details.append({
                '–î–∞—Ç–∞': row['–î–∞—Ç–∞'],
                '–°–∏–º–ø—Ç–æ–º': symptom,
                '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': next(
                    (cat for cat in SYMPTOMS.keys() if symptom in SYMPTOMS[cat]),
                    '–î—Ä—É–≥–æ–µ'
                ),
                '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è': row['–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è']
            })
    
    return symptom_details

def _generate_text_report(df: pd.DataFrame, base_path: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –æ—Ç—á–µ—Ç–∞"""
    txt_filename = f"{base_path}.txt"
    
    with open(txt_filename, "w", encoding="utf-8") as f:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º
        all_symptoms = [
            s for symptoms in df["–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è"].apply(
                lambda x: ImprovedSymptomAnalyzer().analyze_symptoms(x)
            ) 
            for s in symptoms
        ]
        
        if all_symptoms:
            symptom_counts = pd.Series(all_symptoms).value_counts()
            f.write("üìä –¢–æ–ø 5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤:\n")
            for symptom, count in symptom_counts.head(5).items():
                f.write(f"- {symptom}: {count} —Ä–∞–∑(–∞)\n")
            f.write("\n")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π
        for record in df.itertuples():
            f.write(
                f"{record.–î–∞—Ç–∞}:\n"
                f"‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: {record.–°–æ—Å—Ç–æ—è–Ω–∏–µ_–∑–¥–æ—Ä–æ–≤—å—è}\n"
                f"‚Ä¢ –ü–æ–≥–æ–¥–∞: {record.–ü–æ–≥–æ–¥–Ω—ã–µ_—É—Å–ª–æ–≤–∏—è}\n"
                f"‚Ä¢ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ: {record.–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ_–∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è or '–Ω–µ—Ç'}\n"
                f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {record.–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π_–≤—Ä–∞—á or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
            )
    
    return txt_filename

def _generate_symptoms_plot(symptom_details: List[Dict], start_date: str, end_date: str) -> Tuple[str, BytesIO]:
    """–ì—Ä–∞—Ñ–∏–∫ –¥–∏–Ω–∞–º–∏–∫–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ –¥–Ω—è–º"""
    symptom_df = pd.DataFrame(symptom_details)
    daily_symptoms = symptom_df.groupby(['–î–∞—Ç–∞', '–°–∏–º–ø—Ç–æ–º']).size().unstack().fillna(0)
    
    plt.figure(figsize=(12, 6))
    daily_symptoms.plot(kind='bar', stacked=True, ax=plt.gca(), width=0.8)
    plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤\n{start_date} ‚Äî {end_date}')
    plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π')
    plt.xticks(rotation=45, ha='right')
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.legend(title='–°–∏–º–ø—Ç–æ–º—ã', bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.tight_layout()
    
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=120, bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return ('symptoms_by_day.png', buf)

def _generate_heatmap(symptom_details: List[Dict]) -> Tuple[str, BytesIO]:
    """–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤"""
    symptom_df = pd.DataFrame(symptom_details)
    heatmap_data = symptom_df.groupby(['–î–∞—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è']).size().unstack().fillna(0)
    heatmap_data = heatmap_data.div(heatmap_data.sum(axis=1), axis=0)
    
    plt.figure(figsize=(10, 6))
    sns.heatmap(
        heatmap_data.T,
        cmap='YlOrRd',
        annot=True, 
        fmt='.1%',
        linewidths=.5,
        cbar_kws={'label': '–î–æ–ª—è —Å–∏–º–ø—Ç–æ–º–æ–≤'}
    )
    plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
    plt.tight_layout()
    
    buf = BytesIO()
    plt.savefig(buf, format='png', dpi=120)
    buf.seek(0)
    plt.close()
    
    return ('symptoms_heatmap.png', buf)

def _create_empty_plot(message: str) -> Tuple[str, BytesIO]:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    plt.figure(figsize=(10, 2))
    plt.text(0.5, 0.5, message, ha='center', va='center')
    plt.axis('off')
    
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return ('empty_plot.png', buf)

def _create_error_plot(error: Exception) -> Tuple[str, BytesIO]:
    """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ"""
    plt.figure(figsize=(10, 3))
    plt.text(
        0.5, 0.5, 
        f"–û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:\n{str(error)}", 
        ha='center', 
        va='center',
        color='red'
    )
    plt.axis('off')
    
    buf = BytesIO()
    plt.savefig(buf, format='png', bbox_inches='tight')
    buf.seek(0)
    plt.close()
    
    return ('error_plot.png', buf)

async def start_health_entry(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        await callback_query.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è:")
        await HealthConditionState.waiting_for_condition.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_health_entry: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_health_entry(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        user_id = message.from_user.id
        health_data = message.text
        date_now = datetime.datetime.now().strftime("%Y-%m-%d")

        async with state.proxy() as data:
            data['health_condition'] = health_data

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT timezone, birth_date, chronic_conditions FROM user_info WHERE user_id = ?", 
            (user_id,)
        )
        user_info = cursor.fetchone()
        
        if not user_info:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
            await state.finish()
            return

        timezone, birth_date, chronic_conditions = user_info
        age = birth_date
        city = get_city_by_timezone(timezone)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        weather_data = await get_weather_data(city)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        cursor.execute('''
            INSERT INTO user_condition_analysis 
            (user_id, user_condition, weather_condition, date_an, chronic_conditions, age, diagnosis, doctor)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, health_data, weather_data, date_now, chronic_conditions, age,"-","-"))
        
        conn.commit()
        conn.close()
        
        await message.answer(
            "‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
            f"‚ù§Ô∏è–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {health_data}\n"
            f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {city}\n"
            f"üå§ –ü–æ–≥–æ–¥–∞: {weather_data}",
            reply_markup=get_health_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_health_entry: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
    finally:
        await state.finish()

async def start_health_analysis(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        await callback_query.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        await HealthConditionState.waiting_for_analysis.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_health_analysis: {str(e)}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
async def process_report_days(update: types.Message | types.CallbackQuery, state: FSMContext):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        data = await state.get_data()
        days = data.get("days", 1)
        user_id = update.from_user.id
        message = update.message if isinstance(update, types.CallbackQuery) else update

        end_date = datetime.datetime.now()
        start_date = end_date - datetime.timedelta(days=days)

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_condition, weather_condition, date_an, diagnosis, chronic_conditions, age, doctor
            FROM user_condition_analysis 
            WHERE user_id = ? AND date_an BETWEEN ? AND ?
            ORDER BY date_an DESC
        ''', (user_id, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")))
        
        records = cursor.fetchall()
        conn.close()

        if not records:
            await message.answer(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ 4 —Ñ–∞–π–ª–æ–≤)
        report_files = await generate_report(
            records, user_id, 
            start_date.strftime("%Y-%m-%d"), 
            end_date.strftime("%Y-%m-%d")
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è txt)
        await message.answer_document(report_files[1], caption=f"–û—Ç—á–µ—Ç –∑–∞ {days} –¥–Ω–µ–π (TXT)")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if len(report_files) > 2:
            await message.answer("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:")
            await message.answer_document(report_files[2], caption="–ì—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ—Ç—ã —Å–∏–º–ø—Ç–æ–º–æ–≤")
            await message.answer_document(report_files[3], caption="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_health_keyboard())
    finally:
        await state.finish()

async def process_days_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        if days > 365:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 365 –¥–Ω–µ–π.")
            return
            
        await state.update_data(days=days)
        await process_report_days(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")

def get_city_by_timezone(timezone: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã"""
    return timezone.split("/")[-1].replace("_", " ") if timezone else "Moscow"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def report_1_day(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(days=1)
    await process_report_days(callback_query, state)

async def report_7_days(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(days=7)
    await process_report_days(callback_query, state)

async def report_14_days(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(days=14)
    await process_report_days(callback_query, state)

async def report_30_days(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(days=30)
    await process_report_days(callback_query, state)

async def health_keyboard(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_health_keyboard())

async def cancel_health_entry(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_start_keyboard())

async def load_report(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_report_days_keyboard())
    await ReportState.waiting_for_days.set()
