# ================== base imports ==================
import sqlite3, datetime, asyncio, logging, requests, torch
import pandas as pd
import os
import matplotlib.pyplot as plt
import matplotlib.pyplot as plt
import seaborn as sns
# ================== enhanced imports ==================
from aiogram import types, Dispatcher
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.model_utils import AIModel
from io import BytesIO
# ================== From other files ==================
from validation import ImprovedSymptomAnalyzer
from config import DB_PATH, WEATHER_API_KEY
from generation_sentetic_data import SYMPTOMS
from keyboards.keyboards import get_start_keyboard, get_health_keyboard, get_report_days_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class HealthConditionState(StatesGroup):
    waiting_for_condition = State()
    waiting_for_analysis = State()

class ReportState(StatesGroup):
    waiting_for_days = State()

async def process_health_analysis(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_input = message.text
    logger.info(f"–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ç–µ–∫—Å—Ç: '{user_input}'")

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤...")
        analyzer = ImprovedSymptomAnalyzer(
            use_llm=True,
            symptom_threshold=0.65,
            condition_threshold=0.8
        )
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞
        logger.info("–ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤...")
        symptoms = analyzer.analyze_symptoms(user_input)
        if analyzer.use_llm:
            logger.info("–ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ LLM –º–æ–¥–µ–ª—å")
        else:
            logger.warning("–ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞
        logger.info("–ê–Ω–∞–ª–∏–∑ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π...")
        chronic = analyzer.analyze_conditions(user_input)
        if analyzer.use_llm:
            logger.info("–ê–Ω–∞–ª–∏–∑ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ LLM –º–æ–¥–µ–ª—å")
        else:
            logger.warning("–ê–Ω–∞–ª–∏–∑ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ (–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞)")
        
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        symptoms = [s for s in symptoms if s != "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"]
        chronic = [c for c in chronic if c != "–ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ"]
        
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ - —Å–∏–º–ø—Ç–æ–º—ã: {symptoms}, —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ: {chronic}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        logger.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î...")
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT timezone, birth_date, chronic_conditions FROM user_info WHERE user_id = ?", 
                (user_id,)
            )
            user_info = cursor.fetchone()
            
            if not user_info:
                logger.error("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ë–î")
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
                await state.finish()
                return

            timezone, birth_date, existing_chronic = user_info
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            logger.debug("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π...")
            final_chronic = existing_chronic if existing_chronic and existing_chronic != "-" else "-"
            if chronic:
                chronic_str = ", ".join(chronic)
                final_chronic = f"{existing_chronic}, {chronic_str}" if existing_chronic and existing_chronic != "-" else chronic_str
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è: {final_chronic}")

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            weather_cond = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            if timezone:
                try:
                    city = timezone.split("/")[-1].replace("_", " ")
                    logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
                    weather = await get_weather_data(city)
                    weather_cond = weather.split(',')[0] if weather else "–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å"
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ø–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather_cond}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã: {str(e)}")

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI –º–æ–¥–µ–ª–∏
            symptoms_str = ", ".join(symptoms) if symptoms else "–ß—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Ö–æ—Ä–æ—à–æ"
            logger.debug(f"–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã –¥–ª—è AI –º–æ–¥–µ–ª–∏: {symptoms_str}")
            
            ai_model = await AIModel.get_instance()
            if not ai_model.is_ready:
                logger.error("AI –º–æ–¥–µ–ª—å –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                await message.answer("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return

            try:
                logger.info("–ó–∞–ø—É—Å–∫ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
                # –°–æ–∑–¥–∞–µ–º DataFrame —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
                input_df = pd.DataFrame({
                    '–í–æ–∑—Ä–∞—Å—Ç': [birth_date] if birth_date else [0],
                    '–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è': [final_chronic],
                    '–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è': [weather_cond]
                })

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                additional_features = ai_model.preprocessor.transform(input_df)
                features_tensor = torch.tensor(
                    additional_features.toarray() if hasattr(additional_features, "toarray") else additional_features,
                    dtype=torch.float
                ).to(ai_model.device)

                # –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤
                inputs = ai_model.tokenizer(
                    symptoms_str,
                    padding=True,
                    truncation=True,
                    max_length=512,
                    return_tensors="pt"
                ).to(ai_model.device)

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
                with torch.no_grad():
                    diagnosis_logits, doctor_logits = ai_model.model(
                        input_ids=inputs['input_ids'],
                        attention_mask=inputs['attention_mask'],
                        additional_features=features_tensor
                    )

                diagnosis = ai_model.diagnosis_encoder.inverse_transform([torch.argmax(diagnosis_logits).item()])[0]
                doctor = ai_model.doctor_encoder.inverse_transform([torch.argmax(doctor_logits).item()])[0]
                logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI –º–æ–¥–µ–ª–∏ - –¥–∏–∞–≥–Ω–æ–∑: {diagnosis}, –≤—Ä–∞—á: {doctor}")

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ AI –º–æ–¥–µ–ª–∏: {str(e)}")
                await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = (
                f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                f"üìã –°–∏–º–ø—Ç–æ–º—ã: {symptoms_str}\n\n"
                f"ü©∫ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ: {diagnosis}\n\n"
                f"üë®‚Äç‚öïÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {doctor}\n\n"
                f"üìå –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
                f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {birth_date if birth_date else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"‚Ä¢ –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {final_chronic if final_chronic != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
                f"‚Ä¢ –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: {weather_cond}\n"
            )

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î
            try:
                logger.debug("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ë–î...")
                cursor.execute('''
                    INSERT INTO user_condition_analysis 
                    (user_id, user_condition, weather_condition, doctor, diagnosis, date_an, chronic_conditions, age)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user_id, symptoms_str, weather_cond, doctor, diagnosis, 
                    datetime.datetime.now().strftime("%Y-%m-%d"), 
                    final_chronic, birth_date
                ))
                conn.commit()
                logger.info("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
            except sqlite3.Error as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {str(e)}")

        await message.answer(response, reply_markup=get_health_keyboard())
        logger.info("–ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", exc_info=True)
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Å–∏–º–ø—Ç–æ–º—ã –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        await state.finish()
        logger.info("–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
async def get_weather_data(city: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
    try:
        response = await asyncio.to_thread(requests.get, url, timeout=5)
        if response.status_code == 200:
            data = response.json()
            return f"{data['weather'][0]['description']}, {data['main']['temp']}¬∞C, {data['main']['humidity']}%"
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ."

async def delete_old_records():
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ 60 –¥–Ω–µ–π)"""
    while True:
        try:
            conn = sqlite3.connect(DB_PATH)
            cursor = conn.cursor()
            two_months_ago = (datetime.datetime.now() - datetime.timedelta(days=60)).strftime("%Y-%m-%d")
            cursor.execute("DELETE FROM user_condition_analysis WHERE date_an <= ?", (two_months_ago,))
            conn.commit()
            conn.close()
            await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑ –≤ –¥–µ–Ω—å
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {e}")
            await asyncio.sleep(3600)  # –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def generate_report(records, user_id: int, start_date: str, end_date: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    try:
        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(records, columns=[
            "–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è", "–ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è", "–î–∞—Ç–∞", 
            "–î–∏–∞–≥–Ω–æ–∑", "–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "–í–æ–∑—Ä–∞—Å—Ç", "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –≤—Ä–∞—á"
        ])
        
        # –ê–Ω–∞–ª–∏–∑ —Å–∏–º–ø—Ç–æ–º–æ–≤
        analyzer = ImprovedSymptomAnalyzer()
        all_symptoms = []
        symptom_details = []
        
        for _, row in df.iterrows():
            symptoms = analyzer.analyze_symptoms(row['–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è'])
            for symptom in symptoms:
                all_symptoms.append(symptom)
                symptom_details.append({
                    '–î–∞—Ç–∞': row['–î–∞—Ç–∞'],
                    '–°–∏–º–ø—Ç–æ–º': symptom,
                    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': next((cat for cat in SYMPTOMS.keys() if symptom in SYMPTOMS[cat]), '–î—Ä—É–≥–æ–µ')
                })
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        os.makedirs("reports", exist_ok=True)
        base_filename = f"reports/health_report_{user_id}_{start_date}_to_{end_date}"
        
        # 2. –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å —Ç–æ–ø–æ–º —Å–∏–º–ø—Ç–æ–º–æ–≤
        txt_filename = f"{base_filename}.txt"
        with open(txt_filename, "w", encoding="utf-8") as f:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º
            if all_symptoms:
                symptom_counts = pd.Series(all_symptoms).value_counts()
                f.write("üìä –¢–æ–ø 5 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤:\n")
                for symptom, count in symptom_counts.head(5).items():
                    f.write(f"- {symptom}: {count} —Ä–∞–∑(–∞)\n")
                f.write("\n")
            
            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            for record in records:
                f.write(
                    f"{record[2]}: –°–æ—Å—Ç–æ—è–Ω–∏–µ: {record[0]}\n"
                    f"–ü–æ–≥–æ–¥–∞: {record[1]}\n"
                    f"–î–∏–∞–≥–Ω–æ–∑: {record[3]}\n"
                    f"–í—Ä–∞—á: {record[6]}\n\n"
                )
        
        # 3. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–º–ø—Ç–æ–º—ã)
        image_files = []
        if symptom_details:
            symptom_df = pd.DataFrame(symptom_details)
            
            # A. –ì—Ä–∞—Ñ–∏–∫ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ –¥–Ω—è–º
            plt.figure(figsize=(12, 6))
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Å–∏–º–ø—Ç–æ–º—É
            daily_symptoms = symptom_df.groupby(['–î–∞—Ç–∞', '–°–∏–º–ø—Ç–æ–º']).size().unstack().fillna(0)
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ —Å–∏–º–ø—Ç–æ–º–æ–≤
            top_symptoms = symptom_df['–°–∏–º–ø—Ç–æ–º'].value_counts().index[:5]  # –¢–æ–ø 5 —Å–∏–º–ø—Ç–æ–º–æ–≤
            daily_symptoms = daily_symptoms[top_symptoms]
            
            # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            daily_symptoms.plot(kind='bar', stacked=True, ax=plt.gca(), width=0.8)
            plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ –¥–Ω—è–º\n{start_date} - {end_date}')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π')
            plt.xlabel('–î–∞—Ç–∞')
            plt.xticks(rotation=45, ha='right')
            plt.grid(axis='y', linestyle='--', alpha=0.7)
            plt.legend(title='–°–∏–º–ø—Ç–æ–º—ã', bbox_to_anchor=(1.05, 1), loc='upper left')
            plt.tight_layout()
            
            buf1 = BytesIO()
            plt.savefig(buf1, format='png', dpi=120, bbox_inches='tight')
            buf1.seek(0)
            plt.close()
            image_files.append(('symptoms_by_day.png', buf1))
            
            # B. –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
            plt.figure(figsize=(10, 6))
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –¥–∞—Ç–∞–º
            heatmap_data = symptom_df.groupby(['–î–∞—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è']).size().unstack().fillna(0)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
            heatmap_data = heatmap_data.div(heatmap_data.sum(axis=1), axis=0)
            
            sns.heatmap(
                heatmap_data.T,
                cmap='YlOrRd',
                annot=True, fmt='.1%',
                linewidths=.5,
                cbar_kws={'label': '–î–æ–ª—è —Å–∏–º–ø—Ç–æ–º–æ–≤'}
            )
            plt.title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –¥–Ω—è–º')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–∏–º–ø—Ç–æ–º–æ–≤')
            plt.tight_layout()
            
            buf2 = BytesIO()
            plt.savefig(buf2, format='png', dpi=120)
            buf2.seek(0)
            plt.close()
            image_files.append(('symptoms_heatmap.png', buf2))
        
        # 4. CSV –æ—Ç—á–µ—Ç (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
        csv_filename = f"{base_filename}.csv"
        df.to_csv(csv_filename, index=False, encoding="utf-8")
        
        return (
            InputFile(csv_filename),
            InputFile(txt_filename),
            *[InputFile(buf, filename=name) for name, buf in image_files]
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}", exc_info=True)
        raise

async def start_health_entry(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        await callback_query.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è:")
        await HealthConditionState.waiting_for_condition.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_health_entry: {e}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def process_health_entry(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
    try:
        user_id = message.from_user.id
        health_data = message.text
        date_now = datetime.datetime.now().strftime("%Y-%m-%d")

        async with state.proxy() as data:
            data['health_condition'] = health_data

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT timezone, birth_date, chronic_conditions FROM user_info WHERE user_id = ?", 
            (user_id,)
        )
        user_info = cursor.fetchone()
        
        if not user_info:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ –≤ –ø—Ä–æ—Ñ–∏–ª–µ.")
            await state.finish()
            return

        timezone, birth_date, chronic_conditions = user_info
        age = birth_date
        city = get_city_by_timezone(timezone)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        weather_data = await get_weather_data(city)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        cursor.execute('''
            INSERT INTO user_condition_analysis 
            (user_id, user_condition, weather_condition, date_an, chronic_conditions, age, diagnosis, doctor)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, health_data, weather_data, date_now, chronic_conditions, age,"-","-"))
        
        conn.commit()
        conn.close()
        
        await message.answer(
            "‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.\n"
            f"‚ù§Ô∏è–°–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ: {health_data}\n"
            f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {city}\n"
            f"üå§ –ü–æ–≥–æ–¥–∞: {weather_data}",
            reply_markup=get_health_keyboard()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_health_entry: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")
    finally:
        await state.finish()

async def start_health_analysis(callback_query: types.CallbackQuery):
    """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        await callback_query.message.answer("–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        await HealthConditionState.waiting_for_analysis.set()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_health_analysis: {str(e)}")
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
async def process_report_days(update: types.Message | types.CallbackQuery, state: FSMContext):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    try:
        data = await state.get_data()
        days = data.get("days", 1)
        user_id = update.from_user.id
        message = update.message if isinstance(update, types.CallbackQuery) else update

        end_date = datetime.datetime.now()
        start_date = end_date - datetime.timedelta(days=days)

        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_condition, weather_condition, date_an, diagnosis, chronic_conditions, age, doctor
            FROM user_condition_analysis 
            WHERE user_id = ? AND date_an BETWEEN ? AND ?
            ORDER BY date_an DESC
        ''', (user_id, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")))
        
        records = cursor.fetchall()
        conn.close()

        if not records:
            await message.answer(f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π –∑–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.finish()
            return

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ (—Ç–µ–ø–µ—Ä—å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ 4 —Ñ–∞–π–ª–æ–≤)
        report_files = await generate_report(
            records, user_id, 
            start_date.strftime("%Y-%m-%d"), 
            end_date.strftime("%Y-%m-%d")
        )
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É –¥–ª—è txt)
        await message.answer_document(report_files[1], caption=f"–û—Ç—á–µ—Ç –∑–∞ {days} –¥–Ω–µ–π (TXT)")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        if len(report_files) > 2:
            await message.answer("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏:")
            await message.answer_document(report_files[2], caption="–ì—Ä–∞—Ñ–∏–∫ —á–∞—Å—Ç–æ—Ç—ã —Å–∏–º–ø—Ç–æ–º–æ–≤")
            await message.answer_document(report_files[3], caption="–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.finish()

async def process_days_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞"""
    try:
        days = int(message.text)
        if days <= 0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
            return
        if days > 365:
            await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - 365 –¥–Ω–µ–π.")
            return
            
        await state.update_data(days=days)
        await process_report_days(message, state)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")

def get_city_by_timezone(timezone: str) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã"""
    return timezone.split("/")[-1].replace("_", " ") if timezone else "Moscow"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
async def report_1_day(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(days=1)
    await process_report_days(callback_query, state)

async def report_7_days(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(days=7)
    await process_report_days(callback_query, state)

async def report_14_days(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(days=14)
    await process_report_days(callback_query, state)

async def report_30_days(callback_query: types.CallbackQuery, state: FSMContext):
    await state.update_data(days=30)
    await process_report_days(callback_query, state)

async def health_keyboard(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_health_keyboard())

async def cancel_health_entry(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await callback_query.message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_start_keyboard())

async def load_report(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=get_report_days_keyboard())
    await ReportState.waiting_for_days.set()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers_health(dp: Dispatcher):
    dp.register_callback_query_handler(start_health_entry, text="record_health")
    dp.register_callback_query_handler(start_health_analysis, text="analyze_health")
    dp.register_message_handler(process_health_entry, state=HealthConditionState.waiting_for_condition)
    dp.register_message_handler(process_health_analysis, state=HealthConditionState.waiting_for_analysis)
    dp.register_callback_query_handler(cancel_health_entry, text="cancel_health_entry", state="*")
    
    dp.register_callback_query_handler(load_report, text="report_health")
    dp.register_callback_query_handler(report_1_day, text="report_1_day", state=ReportState.waiting_for_days)
    dp.register_callback_query_handler(report_7_days, text="report_7_days", state=ReportState.waiting_for_days)
    dp.register_callback_query_handler(report_14_days, text="report_14_days", state=ReportState.waiting_for_days)
    dp.register_callback_query_handler(report_30_days, text="report_30_days", state=ReportState.waiting_for_days)
    dp.register_message_handler(process_days_input, state=ReportState.waiting_for_days)
    
    dp.register_callback_query_handler(health_keyboard, text="menu_health")
    dp.register_callback_query_handler(health_keyboard, text="back_to_health")