import geopy
from timezonefinder import TimezoneFinder
import datetime
import pytz
import logging
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from utils.database import save_user_info, get_user_info
from keyboards.keyboards import get_start_keyboard

logging.basicConfig(level=logging.INFO)

class UserInfo(StatesGroup):
    waiting_for_city = State()
    waiting_for_year = State()
    waiting_for_month = State()
    waiting_for_day = State()
    waiting_for_conditions = State()

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async def handle_personal_data(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    user_id = callback_query.from_user.id
    
    old_data = await get_user_info(user_id)
    if old_data:
        birth_date = old_data.get('birth_date', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')
        if birth_date != '–Ω–µ —É–∫–∞–∑–∞–Ω–∞':
            try:
                birth_date_obj = datetime.datetime.strptime(birth_date, '%d.%m.%Y').date()
                today = datetime.date.today()
                age = today.year - birth_date_obj.year - ((today.month, today.day) < (birth_date_obj.month, birth_date_obj.day))
                age_text = f" ({age} –ª–µ—Ç)"
            except Exception:
                age_text = ""
        else:
            age_text = ""
        timezone=old_data.get('timezone')    
        message_text = (
            "–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}\n"
            f"üéÇ–í–æ–∑—Ä–∞—Å—Ç: {birth_date}{age_text}\n"
            f"üíä–•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {old_data.get('chronic_conditions', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')}\n\n"
            "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö? –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"
        )
    else:
        message_text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è:"
    
    await callback_query.message.answer(message_text)
    await UserInfo.waiting_for_city.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ—Ä–æ–¥–∞
async def handle_city(message: types.Message, state: FSMContext):
    city = message.text.strip()
    if not city:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return

    timezone = await get_timezone(message.bot, message.chat.id, city)
    if not timezone:
        return

    async with state.proxy() as data:
        data['timezone'] = timezone

    await show_year_selection(message)
    await UserInfo.waiting_for_year.set()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
async def show_year_selection(message: types.Message):
    current_year = datetime.datetime.now().year
    years = list(range(current_year - 100, current_year - 10))
    
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    for year in years[-20:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–µ—Ç
        keyboard.insert(types.InlineKeyboardButton(str(year), callback_data=f"year_{year}"))
    keyboard.row(types.InlineKeyboardButton("–î—Ä—É–≥–∏–µ –≥–æ–¥–∞...", callback_data="show_all_years"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=keyboard)

async def handle_birth_year(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    if callback_query.data == "show_all_years":
        await show_all_years(callback_query.message)
        return
    
    year = int(callback_query.data.split("_")[1])
    
    async with state.proxy() as data:
        data['birth_year'] = year
    
    await show_month_selection(callback_query.message)
    await UserInfo.waiting_for_month.set()

async def show_all_years(message: types.Message):
    current_year = datetime.datetime.now().year
    years = list(range(current_year - 100, current_year - 10))
    
    keyboard = types.InlineKeyboardMarkup(row_width=5)
    for year in years:
        keyboard.insert(types.InlineKeyboardButton(str(year), callback_data=f"year_{year}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=keyboard)

async def show_month_selection(message: types.Message):
    months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å", 
              "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    
    keyboard = types.InlineKeyboardMarkup(row_width=4)
    for i, month in enumerate(months, 1):
        keyboard.insert(types.InlineKeyboardButton(month, callback_data=f"month_{i}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=keyboard)

async def handle_birth_month(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    month_num = int(callback_query.data.split("_")[1])
    
    async with state.proxy() as data:
        data['birth_month'] = month_num
    
    await show_day_selection(callback_query.message, data['birth_year'], month_num)
    await UserInfo.waiting_for_day.set()

async def show_day_selection(message: types.Message, year: int, month: int):
    if month == 2:
        days_in_month = 29 if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0) else 28
    elif month in [4, 6, 9, 11]:
        days_in_month = 30
    else:
        days_in_month = 31
    
    keyboard = types.InlineKeyboardMarkup(row_width=7)
    for day in range(1, days_in_month + 1):
        keyboard.insert(types.InlineKeyboardButton(str(day), callback_data=f"day_{day}"))
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=keyboard)

async def handle_birth_day(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    day = int(callback_query.data.split("_")[1])
    
    async with state.proxy() as data:
        # –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
        birth_date = datetime.date(
            data['birth_year'],
            data['birth_month'],
            day
        )
        today = datetime.date.today()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ birth_date –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
        data['birth_date'] = str(age)  # –ü—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ "25" –≤–º–µ—Å—Ç–æ "01.01.1999"
    
    await callback_query.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await UserInfo.waiting_for_conditions.set()
    
    await callback_query.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å), —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await UserInfo.waiting_for_conditions.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def handle_chronic_conditions(message: types.Message, state: FSMContext):
    chronic_conditions = message.text.strip() or "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
    user_id = message.from_user.id

    async with state.proxy() as data:
        if not all(k in data for k in ['timezone', 'birth_date']):
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return

        try:
            await save_user_info(
                user_id=user_id,
                timezone=data['timezone'],
                birth_date=data['birth_date'],
                chronic_conditions=chronic_conditions
            )
            
            age_text = f" ({data.get('age_display', '')} –ª–µ—Ç)" if data.get('age_display') else ""
            await message.answer(
                "‚úÖ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n"
                f"‚è∞ –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {data['timezone']}\n"
                f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {data['birth_date']}{age_text}\n"
                f"üíä –•—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {chronic_conditions}"
            )
            
            await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=get_start_keyboard())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            await state.finish()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
async def get_timezone(bot, chat_id, city):
    try:
        geo = geopy.geocoders.Nominatim(user_agent="MedicineReminderBot")
        location = geo.geocode(city)
        if not location:
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
            return None

        tf = TimezoneFinder()
        timezone_str = tf.timezone_at(lat=location.latitude, lng=location.longitude)
        if not timezone_str:
            await bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.")
            return None

        tz = pytz.timezone(timezone_str)
        tz_info = datetime.datetime.now(tz=tz).strftime("%z")
        tz_info = f"{tz_info[:3]}:{tz_info[3:]}"
        
        await bot.send_message(chat_id, f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {timezone_str} (UTC{tz_info})")
        return timezone_str

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞: {e}")
        await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return None